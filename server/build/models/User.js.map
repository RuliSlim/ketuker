{"version":3,"sources":["../../src/models/User.js"],"names":["userSchema","mongoose","Schema","username","type","String","required","unique","email","password","minlength","avatar","address","city","phone","pre","next","saltRounds","Number","process","env","SALT","bcrypt","hash","User","model"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,IAFF;AAGRC,IAAAA,MAAM,EAAE;AAHA,GAD2B;AAMrCC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,MAAM,EAAE;AAHH,GAN8B;AAWrCE,EAAAA,QAAQ,EAAE;AACRL,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,IAFF;AAGRI,IAAAA,SAAS,EAAE,CAAE,CAAF,EAAK,qBAAL;AAHH,GAX2B;AAgBrCC,EAAAA,MAAM,EAAE;AACNP,IAAAA,IAAI,EAAEC;AADA,GAhB6B;AAmBrCO,EAAAA,OAAO,EAAE;AACPR,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GAnB4B;AAuBrCO,EAAAA,IAAI,EAAE;AACJT,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GAvB+B;AA2BrCQ,EAAAA,KAAK,EAAE;AACLV,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLI,IAAAA,SAAS,EAAE,CAAE,EAAF,EAAM,qBAAN;AAHN;AA3B8B,CAApB,CAAnB;AAkCAV,UAAU,CAACe,GAAX,CAAe,MAAf;AAAA,qEAAuB,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,UADe,GACFC,MAAM,CAACC,OAAO,CAACC,GAAR,CAAYC,IAAb,CADJ;AAAA;AAAA,mBAEFC,mBAAOC,IAAP,CAAY,KAAKd,QAAjB,EAA2BQ,UAA3B,CAFE;;AAAA;AAEfM,YAAAA,IAFe;AAGrB,iBAAKd,QAAL,GAAgBc,IAAhB;AACAP,YAAAA,IAAI;;AAJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAOA,IAAMQ,IAAI,GAAGvB,qBAASwB,KAAT,CAAe,MAAf,EAAuBzB,UAAvB,CAAb;;eAEewB,I","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: [ 6, 'too few charachters' ],\n  },\n  avatar: {\n    type: String,\n  },\n  address: {\n    type: String,\n    required: true,\n  },\n  city: {\n    type: String,\n    required: true\n  },\n  phone: {\n    type: String,\n    required: true,\n    minlength: [ 10, 'too few charachters' ],\n  },\n});\n\nuserSchema.pre('save', async function (next) {\n  const saltRounds = Number(process.env.SALT);\n  const hash = await bcrypt.hash(this.password, saltRounds);\n  this.password = hash;\n  next();\n});\n\nconst User = mongoose.model('User', userSchema);\n\nexport default User;\n"],"file":"User.js"}