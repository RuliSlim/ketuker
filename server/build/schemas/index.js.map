{"version":3,"sources":["../../src/schemas/index.js"],"names":["typeDefs","gql","resolvers","Query","getUsers","JSON","redis","get","checkUsers","parse","User","find","getAllUsers","set","stringify","getUser","_","id","users","user","filter","el","_id","length","data","findOne","getOneUser","push","Error","getProducts","Product","getAllProducts","getProduct","products","product","getOneProduct","productsDb","console","log","productByUser","userId","newProducts","productByCategory","category","transactionById","Transaction","findById","transaction","transactionByOriginal","userOriginal","transactions","transactionByTarget","userTarget","nodemailer","mail","subs","text","result","getScrap","item","scrappedData","Mutation","register","input","newUser","error","validateSync","errors","password","properties","message","phone","save","res","token","jwt","sign","process","env","JWT_SECRET","_doc","login","email","bcrypt","compare","username","avatar","address","addProduct","req","headers","title","description","price","whislist","image","submit","userAuth","newProduct","savedProduct","updateProduct","prodId","allProducst","deleteProduct","deleteOne","addTransaction","productOriginal","productTarget","newTrans"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-server';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\n\nimport getTokoPedia from '../utilities/scraping';\nimport sendEmail from '../utilities/nodemailer';\nimport redis from '../utilities/redis';\nimport User from '../models/User';\nimport Product from '../models/Product';\nimport { authen, author } from '../utilities/authenticagtion';\nimport Transaction from '../models/Transaction';\n\nexport const typeDefs = gql`\n  type User {\n    _id: ID!\n    username: String!\n    email: String!\n    password: String!\n    avatar: String!\n    address: String!\n    phone: String!\n    city: String\n    token: String\n  }\n\n  input UserLogin {\n    email: String!\n    password: String!\n  }\n\n  input UserRegister {\n    username: String!\n    email: String!\n    password: String!\n    avatar: String!\n    address: String!\n    city: String!\n    phone: String!\n  }\n\n  type Product {\n    _id: ID!\n    userId: String!\n    title: String!\n    description: String!\n    price: Int!\n    whislist: String!\n    category: String!\n    image: String!\n    submit: Boolean!\n  }\n\n  input InputProduct {\n    title: String!\n    description: String!\n    price: Int!\n    whislist: String!\n    category: String!\n    image: String!\n    submit: Boolean!\n  }\n\n  type Item {\n    title: String!\n    price: String!\n  }\n\n  type Output {\n    result: String!\n  }\n\n  type Transaction {\n    _id: ID!\n    userOriginal: String!\n    userTarget: String!\n    productOriginal: [Product]!\n    productTarget: [Product]!\n    status: Boolean\n  }\n\n  input InputProdTrans {\n    _id: ID!\n    userId: String!\n    title: String!\n    description: String!\n    price: Int!\n    whislist: String!\n    category: String!\n    image: String!\n    submit: Boolean!\n  }\n\n  input InputTransaction {\n    userTarget: String!\n    productOriginal: [InputProdTrans]!\n    productTarget: [InputProdTrans]!\n  }\n\n  type Query {\n    getUsers: [User]!\n    getUser(id: ID!): User!\n\n    getProducts: [Product]!\n    getProduct(id: ID!): Product!\n\n    ##### nodemailer\n    nodemailer: Output!\n\n    ##### scrapping\n    getScrap(item: String!): [Item]!\n\n    productByUser(userId: ID!): [Product]!\n    productByCategory(category: String): [Product]!\n\n    transactionById(id: ID!): Transaction\n    transactionByOriginal(userId: ID!): [Transaction]\n    transactionByTarget(userId: ID!): [Transaction]\n  }\n\n  type Mutation {\n    register(input: UserRegister): User!\n    login(input: UserLogin): User!\n\n    addProduct(input: InputProduct!): Product!\n    updateProduct(id: ID!, input: InputProduct!): Output!\n    deleteProduct(id: ID!): Output!\n\n    addTransaction(input: InputTransaction!): Transaction\n  }\n`;\n\nexport const resolvers = {\n  Query: {\n    getUsers: async () => {\n      const checkUsers = JSON.parse(await redis.get('users'));\n      if (checkUsers) {\n        return checkUsers;\n      } else {\n        const getAllUsers = await User.find();\n        await redis.set('users', JSON.stringify(getAllUsers));\n        return getAllUsers;\n      }\n    },\n    getUser: async (_, { id }) => {\n      try {\n        const users = JSON.parse(await redis.get('users'));\n        const user = users.filter((el) => el._id == id);\n        if (user.length) {\n          const [data] = user;\n          return data;\n        } else {\n          const getOneUser = await User.findOne({ _id: id });\n          users.push(getOneUser);\n          await redis.set('users', JSON.stringify(users));\n          return getOneUser;\n        }\n      } catch (e) {\n        return new Error('User not found!');\n      }\n    },\n\n    getProducts: async () => {\n      const getProducts = JSON.parse(await redis.get('products'));\n      if (getProducts) {\n        return getProducts;\n      } else {\n        const getAllProducts = await Product.find();\n        await redis.set('products', JSON.stringify(getAllProducts));\n        return getAllProducts;\n      }\n    },\n    getProduct: async (_, { id }) => {\n      try {\n        const products = JSON.parse(await redis.get('products'));\n        if (products) {\n          const [product] = products.filter((el) => el._id == id);\n          if (product) return product;\n          else {\n            const getOneProduct = await Product.findOne({ _id: id });\n            product.push(getOneProduct);\n            await redis.set('products', JSON.stringify(products));\n            return getOneProduct;\n          }\n        } else {\n          const productsDb = await Product.find();\n          const getOneProduct = await Product.findOne({ _id: id });\n          await redis.set('products', JSON.stringify(productsDb));\n          return getOneProduct;\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    productByUser: async (_, { userId }) => {\n      try {\n        const products = JSON.parse(await redis.get('products'));\n        let newProducts;\n        if (products) {\n          const product = products.filter((el) => el.userId == userId);\n          if (product) return product;\n        }\n        const getProduct = await Product.findOne({ userId: userId });\n        if (products) {\n          newProducts = [...products, getProduct];\n        } else {\n          newProducts = await Product.find();\n        }\n        await redis.set('products', JSON.stringify(newProducts));\n        return getProduct;\n      } catch (error) {\n        console.log(error, '>>>>>>>2');\n      }\n    },\n\n    productByCategory: async (_, { category }) => {\n      try {\n        if (category) {\n          const products = JSON.parse(await redis.get('products'));\n          if (products) {\n            const product = await products.filter((el) => el.category == category);\n            if (product.length) {\n              return product;\n            }\n          }\n          const getProduct = await Product.find({ category: category });\n          return getProduct;\n        } else {\n          const getProducts = JSON.parse(await redis.get('products'));\n          if (getProducts) {\n            return getProducts;\n          } else {\n            const getAllProducts = await Product.find();\n            await redis.set('products', JSON.stringify(getAllProducts));\n            return getAllProducts;\n          }\n        }\n      } catch (error) {\n        return error;\n      }\n    },\n\n    transactionById: async (_, { id }) => {\n      try {\n        const transaction = await Transaction.findById(id);\n        return transaction;\n      } catch (error) {\n        console.log(error);\n        return error;\n      }\n    },\n\n    transactionByOriginal: async (_, { userId }) => {\n      try {\n        const transactions = await Transaction.find({ userOriginal: userId });\n        return transactions;\n      } catch (error) {\n        console.log(error);\n        return error;\n      }\n    },\n\n    transactionByTarget: async (_, { userId }) => {\n      try {\n        const transactions = await Transaction.find({ userTarget: userId });\n        return transactions;\n      } catch (error) {\n        console.log(error);\n        return error;\n      }\n    },\n\n    nodemailer: async () => {\n      //nanti diisi sesuai data client nya. dibawah hanya template contoh\n      try {\n        const mail = 'smpoern4mild@gmail.com';\n        const subs = 'Invitation bartering goods';\n        const text =\n          ' Hai, I would like to barter my goods with your goods. give me reaction if you are interesting or we can talk first before get deal :)';\n\n        await sendEmail(mail, subs, text);\n\n        return {\n          result: 'Succesfully sent email to our lovely client!',\n        };\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    getScrap: async (_, { item }) => {\n      const scrappedData = await getTokoPedia(item);\n\n      return scrappedData;\n    },\n  },\n  Mutation: {\n    register: async (_, { input }) => {\n      const newUser = new User(input);\n      const error = newUser.validateSync();\n      if (error) {\n        if (error.errors.password) {\n          throw new Error(error.errors.password.properties.message);\n        } else {\n          throw new Error(error.errors.phone.properties.message);\n        }\n      } else {\n        const res = await newUser.save();\n        const token = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET);\n        const users = JSON.parse(await redis.get('users'));\n        if (users) {\n          users.push(newUser);\n          await redis.set('users', JSON.stringify(users));\n        } else {\n          await redis.set('users', JSON.stringify([res]));\n        }\n        return { _id: res._id, ...res._doc, token };\n      }\n    },\n    login: async (_, { input }) => {\n      const { email, password } = input;\n      const getUser = await User.findOne({ email });\n      if (getUser) {\n        const compare = await bcrypt.compare(password, getUser.password);\n        if (!compare) {\n          throw new Error('Wrong Password / Wrong Email');\n        } else {\n          //kalo secretPrivateKey gw taruh di .env masih error. sementara gtu.\n          const token = jwt.sign({ id: getUser._id }, process.env.JWT_SECRET);\n          const { _id, username, email, avatar, address, phone } = getUser;\n          return {\n            _id: _id,\n            username,\n            avatar,\n            address,\n            phone,\n            email,\n            password,\n            token,\n          };\n        }\n      } else {\n        throw new Error('Wrong Password / Wrong Email');\n      }\n    },\n\n    addProduct: async (\n      _,\n      { input },\n      {\n        req: {\n          headers: { token },\n        },\n      }\n    ) => {\n      const { title, description, price, whislist, category, image, submit } = input;\n      const userAuth = await authen(token);\n      const user = await User.findOne({ _id: userAuth.id });\n      if (!user) throw new Error('You have to login!');\n      const newProduct = new Product({\n        title,\n        description,\n        price,\n        whislist,\n        category,\n        image,\n        submit,\n      });\n      newProduct.userId = user._id;\n      const savedProduct = await newProduct.save();\n      const getProducts = JSON.parse(await redis.get('products'));\n\n      if (getProducts) {\n        getProducts.push(savedProduct);\n        await redis.set('products', JSON.stringify(getProducts));\n      } else {\n        const getAllProducts = await Product.find();\n        await redis.set('products', JSON.stringify(getAllProducts));\n      }\n      return newProduct;\n    },\n    updateProduct: async (\n      _,\n      { id, input },\n      {\n        req: {\n          headers: { token },\n        },\n      }\n    ) => {\n      const { title, description, price, whislist, category, image, submit } = input;\n\n      const userAuth = await authen(token);\n      const user = await User.findOne({ _id: userAuth.id });\n      if (!user) throw new Error('You have to login!');\n      if (!author({ userId: user._id, prodId: id })) throw new Error('You are not authorized!');\n      const updateProduct = await Product.findOne({ _id: id });\n      updateProduct.title = title;\n      updateProduct.description = description;\n      updateProduct.price = price;\n      updateProduct.whislist = whislist;\n      updateProduct.category = category;\n      updateProduct.image = image;\n      updateProduct.submit = submit;\n\n      await updateProduct.save();\n      const products = JSON.parse(await redis.get('products'));\n      const newProducts = products.filter((el) => el._id != id);\n      if (newProducts.length) {\n        newProducts.push(updateProduct);\n        await redis.set('products', JSON.stringify(newProducts));\n      } else {\n        const allProducst = await Product.find();\n        await redis.set('products', JSON.stringify(allProducst));\n      }\n      return {\n        result: 'Succesfully updated product!',\n      };\n    },\n    deleteProduct: async (\n      _,\n      { id },\n      {\n        req: {\n          headers: { token },\n        },\n      }\n    ) => {\n      const userAuth = await authen(token);\n      const user = await User.findOne({ _id: userAuth.id });\n      if (!user) throw new Error('You have to login!');\n      if (!author({ userId: user._id, prodId: id }));\n\n      await Product.deleteOne({ _id: id });\n\n      const products = JSON.parse(await redis.get('products'));\n      const newProducts = products.filter((el) => el._id != id);\n      if (newProducts.length) {\n        await redis.set('products', JSON.stringify(newProducts));\n      } else {\n        const getAllProducts = await Product.find();\n        await redis.set('products', JSON.stringify(getAllProducts));\n      }\n      return {\n        result: 'Successfully deleted product!',\n      };\n    },\n\n    addTransaction: async (\n      _,\n      { input },\n      {\n        req: {\n          headers: { token },\n        },\n      }\n    ) => {\n      try {\n        const userAuth = await authen(token);\n        const user = await User.findOne({ _id: userAuth.id });\n        const { userTarget, productOriginal, productTarget } = input;\n        if (!user) throw new Error('You have to login!');\n        const transaction = new Transaction({\n          userOriginal: userAuth.id,\n          userTarget,\n          productOriginal,\n          productTarget,\n        });\n        const newTrans = await transaction.save();\n        return newTrans;\n      } catch (error) {\n        console.log(error);\n        return error;\n      }\n    },\n  },\n};\n"],"file":"index.js"}